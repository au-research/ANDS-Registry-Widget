/*
 *  ANDS-Registry-Widget - v0.0.1
 *  A Widget to display and search for ANDS Registry contents
 *  https://developers.ands.org.au/
 *
 *  Made by Minh Duc Nguyen
 *  Under MIT License
 */
!function(a,b,c,d){"use strict";function e(b,c){this.element=b,this.settings=a.extend({},h,c),this._defaults=h,this.params=i,this._name=g,this.init()}function f(b){return{lookup:function(a){return this.get(b.api_url,a).then(function(a){return a})},get:function(b,c){return a.ajax({dataType:"jsonp",url:b,data:c}).then(function(a){return a})}}}var g="registryWidget",h={mode:"display-grant",api_url:"",service_url:"http://devl.ands.org.au/minh/api/",render_engine:"default"},i={api_key:"public"};a.extend(e.prototype,{init:function(){this.setParams(),this.service=new f(this.settings);var b=a(this.element),c=this;switch("object"==typeof Mustache&&(this.settings.render_engine="mustache"),this.settings.mode){case"display-grant":c.lookupAndDisplay(b,"display-grant-tpl");break;case"lookup-grant":this.bindLookup(a(this.element))}},bindLookup:function(b){var c,d=this;c=a(b).next(".display-target").length>0?a(b).next(".display-target")[0]:a("<div class='display-target'/>").insertAfter(b),a(b).on("keyup",function(){d.params.purl=a(b).val(),d.lookupAndDisplay(c,"display-grant-tpl")}),""!=a(b).val()&&(d.params.purl=a(b).val(),d.lookupAndDisplay(c,"display-grant-tpl"))},lookupAndDisplay:function(a,b){var c=this;this.service.lookup(this.params).done(function(d){c.hasCallback("display")?c.callback("display",a,d):c.render(a,d,b)})},hasCallback:function(a){return!(!this.settings.hasOwnProperty("evt")||!this.settings.evt.hasOwnProperty(a)||"function"!=typeof this.settings.evt[a])},callback:function(a,b,c){this.settings.evt[a](b,c)},setParams:function(){this.settings.mode.indexOf("grant")>-1&&(this.settings.api_url=this.settings.service_url+"v2.0/registry.jsonp/grants"),this.settings.api_key&&(this.params.api_key=this.settings.api_key),this.params=a.extend({},this.params,a(this.element).data())},render:function(b,c,d){if("default"==this.settings.render_engine)a(b).text(JSON.stringify(c));else if("mustache"==this.settings.render_engine){d=a("#"+d).html();var e=Mustache.render(d,c);a(b).html(e)}else console.error("No rendering engine found")}}),a.fn[g]=function(b){return this.each(function(){a.data(this,"plugin_"+g)||a.data(this,"plugin_"+g,new e(this,b))})}}(jQuery,window,document);