/*
 *  ANDS-Registry-Widget - v0.0.1
 *  A Widget to display and search for ANDS Registry contents
 *  https://developers.ands.org.au/
 *
 *  Made by Minh Duc Nguyen
 *  Under MIT License
 */
!function(a,b,c,d){"use strict";function e(b,c){this.element=b,this.settings=a.extend({},h,c),this._defaults=h,this.params=i,this._name=g,this.init()}function f(b){return{lookup:function(a){return this.get(b.api_url,a).then(function(a){return a})},get:function(b,c){return a.ajax({dataType:"jsonp",url:b,data:c}).then(function(a){return a})}}}var g="registryWidget",h={mode:"display-grant",api_url:"",service_url:"http://devl.ands.org.au/minh/api/",render_engine:"default"},i={api_key:"public"};a.extend(e.prototype,{init:function(){this.setParams(),this.service=new f(this.settings);var b=a(this.element),c=this;switch("object"==typeof Mustache&&(this.settings.render_engine="mustache"),this.settings.mode){case"display-grant":c.lookupAndDisplay(b,"display-grant-tpl");break;case"lookup-grant":this.bindLookup(a(this.element));break;case"search-grant":this.bindSearch(a(this.element)),this.bindLookup(a(this.element))}},bindLookup:function(b){var c,d=this;c=a(b).next(".display-target").length>0?a(b).next(".display-target")[0]:a("<div class='display-target'/>").insertAfter(b),d.lookup(b,c),a(b).on("blur",function(){d.lookup(b,c)}),a(b).on("keyup",function(){e(function(){d.lookup(b,c)},1e3)});var e=function(){var a=0;return function(b,c){clearTimeout(a),a=setTimeout(b,c)}}()},bindSearch:function(b){var c,d=this;c=a(b).next(".search-toggle").length>0?a(b).next(".search-toggle")[0]:a("<a href='javascript:;' class='search-toggle'>Open Search</a>").insertAfter(b);var e;e=a(c).next(".search-container").length>0?a(c).next(".search-container")[0]:a("<div class='search-container'></div>").insertAfter(c),e.hide();var f={};this.settings.search_options&&this.settings.search_options.facets&&(a.each(this.settings.search_options.facets,function(){}),f.facets=this.settings.search_options.facets),this.render(e,f,"search-tpl"),c.on("click",function(){e.slideToggle()});var g=a(".search-query",e),h=a(".search-button",e),i=a(".search-result",e);a(".facet-select",e);this.settings.search_options&&this.settings.search_options.auto_search&&(d.search(a(g).val(),i),e.show()),g.on("keyup",function(b){13==b.which&&d.search(a(g).val(),i)}),h.on("click",function(){d.search(a(g).val(),i)}),a(i).on("click",".search-result-item",function(){a(b).val(a(this).data("purl")),a(e).hide(),a(b).blur(),a("html, body").animate({scrollTop:a(b).offset().top},500)}),a(i).on("change",".facet-select",function(){var b=a(this).data("param"),c=a(this).val();d.params[b]=c,d.search(a(g).val(),i)}),a(i).on("click",".show-more",function(){var b;b=d.params.pp?d.params.pp:30,d.params.rows=d.params.rows?d.params.rows+b:30+b,d.search(a(g).val(),i)})},lookup:function(b,c){var d=this;""!=a(b).val()&&d.params.purl!=a(b).val()&&(d.params.purl=a(b).val(),d.lookupAndDisplay(c,"display-grant-tpl"))},search:function(a,b){var c=this;delete c.params.purl,c.params.q=a,c.lookupAndDisplay(b,"search-result-tpl")},getSearchOption:function(a){return this.settings.search_options&&this.settings.search_options[a]?this.settings.search_options[a]:!1},lookupAndDisplay:function(b,c){var d=this;""==a(b).text()&&a(b).text("Loading..."),d.getSearchOption("facets")!==!1&&(d.params.facets=d.getSearchOption("facets").join()),d.service.lookup(d.params).done(function(a){d.hasCallback("display")?d.callback("display",b,a):d.render(b,a,c)})},hasCallback:function(a){return!(!this.settings.hasOwnProperty("evt")||!this.settings.evt.hasOwnProperty(a)||"function"!=typeof this.settings.evt[a])},callback:function(a,b,c){this.settings.evt[a](b,c)},setParams:function(){this.settings.mode.indexOf("grant")>-1&&(this.settings.api_url=this.settings.service_url+"v2.0/registry.jsonp/grants"),this.settings.api_key&&(this.params.api_key=this.settings.api_key),this.params=a.extend({},this.params,a(this.element).data()),this.getSearchOption("params")&&(this.params=a.extend({},this.params,this.getSearchOption("params")))},render:function(b,c,d){var e=this;if("default"==this.settings.render_engine)a(b).text(JSON.stringify(c));else if("mustache"==this.settings.render_engine){d=a("#"+d).html();var f=Mustache.render(d,c);a(b).html(f),a.each(a("select",b),function(){var b=a(this).data("param");e.params[b]&&a(this).val(e.params[b])})}else console.error("No rendering engine found")}}),a.fn[g]=function(b){return this.each(function(){a.data(this,"plugin_"+g)||a.data(this,"plugin_"+g,new e(this,b))})}}(jQuery,window,document);